{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/util-components/Link/Link.tsx","webpack:///./src/components/Header/header.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/pages/404.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["StaticQueryContext","React","createContext","StaticQuery","props","react_default","a","createElement","Consumer","staticQueryData","data","query","render","children","propTypes","PropTypes","object","string","isRequired","func","AppLink","_ref","objectWithoutPropertiesLoose_default","gatsby_link_default","Header","siteTitle","style","background","marginBottom","margin","maxWidth","padding","Link","to","defaultProps","Layout","gatsby_browser_entry_StaticQuery","Fragment","header","site","siteMetadata","title","paddingTop","Date","getFullYear","href","_755544856","SEO","_ref$description","description","_ref$lang","lang","_ref$meta","meta","_ref$keywords","keywords","_2417117884","metaDescription","completeMeta","name","content","property","author","concat","length","join","Helmet_default","htmlAttributes","titleTemplate","NotFoundPage","components_layout","seo","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape"],"mappings":"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","file":"component---src-pages-404-tsx-d71f5382d56029cbf629.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React, {FunctionComponent} from \"react\"\nimport { Link as GatsbyLink } from \"gatsby\"\n\n// Abstraction for links, so we don't have dependency on Gatsby in our components.\n// If more props needed, add them here\nexport interface AppLinkProps {\n    activeClassName?: string;\n    replace?: boolean;\n    to: string;\n    className?: string;\n}\n\nconst AppLink: FunctionComponent<AppLinkProps> = ({children, ...props}) => {\n    return (\n        <GatsbyLink {...props}>\n            {children}\n        </GatsbyLink>\n    )\n};\n\nexport default AppLink;\n","import React, {FunctionComponent} from \"react\"\nimport AppLink from \"../../util-components/Link/Link\";\n\ninterface Props {\n    siteTitle: string;\n}\n\nconst Header: FunctionComponent<Props> = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <AppLink to=\"/\">{siteTitle}</AppLink>\n      </h1>\n    </div>\n  </header>\n);\n\nHeader.defaultProps = {\n  siteTitle: ``,\n};\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React, {FunctionComponent, ReactNode} from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header/header\"\nimport \"./layout.scss\"\n\ninterface Props {\n    children: ReactNode;\n}\n\nconst Layout: FunctionComponent<Props> = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div\n          style={{\n            margin: `0 auto`,\n            maxWidth: 960,\n            padding: `0px 1.0875rem 1.45rem`,\n            paddingTop: 0,\n          }}\n        >\n          <main>{children}</main>\n          <footer>\n            Â© {new Date().getFullYear()}, Built with\n            {` `}\n            <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n          </footer>\n        </div>\n      </>\n    )}\n  />\n);\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, {FunctionComponent} from \"react\"\nimport Helmet from \"react-helmet\"\nimport {useStaticQuery, graphql} from \"gatsby\"\n\ninterface Props {\n    description?: string;\n    lang?: string;\n    meta?: JSX.IntrinsicElements['meta'][];\n    keywords?: string[];\n    title: string;\n}\n\nconst SEO: FunctionComponent<Props> = (\n    {\n        description = '',\n        lang = 'en',\n        meta = [],\n        keywords = [],\n        title\n    }) => {\n\n    const {site} = useStaticQuery(\n        graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n    );\n\n    const metaDescription = description || site.siteMetadata.description;\n\n    const completeMeta = [\n        {\n            name: `description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: metaDescription,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: site.siteMetadata.author,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: metaDescription,\n        },\n    ]\n        .concat(\n            keywords.length > 0\n                ? {\n                    name: `keywords`,\n                    content: keywords.join(`, `),\n                }\n                : []\n        )\n        .concat(meta as any);\n\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={completeMeta}\n        />\n    )\n};\n\n\nexport default SEO;\n","import React, {FunctionComponent} from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\ninterface Props {}\n\nconst NotFoundPage: FunctionComponent<Props> = () => (\n  <Layout>\n    <SEO title=\"404: Not found\" />\n    <h1>NOT FOUND</h1>\n    <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n  </Layout>\n);\n\nexport default NotFoundPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}