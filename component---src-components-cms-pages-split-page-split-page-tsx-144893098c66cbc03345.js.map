{"version":3,"sources":["webpack:///./src/components/cms/SplitContainer/SplitContainer.tsx","webpack:///./src/components/cms/pages/SplitPage/SplitPage.tsx","webpack:///./src/contexts/AppConfig/AppConfig.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/components/Navigation/Navigation.tsx","webpack:///./src/components/cms/pages/PageRoot/PageRoot.tsx","webpack:///./src/components/cms/content-types/RichText/RichText.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/utils/cms/component-resolver.tsx","webpack:///./src/components/cms/content-types/Image/Image.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/util-components/Link/Link.tsx"],"names":["SplitContainer","_ref","area1","area2","toggleRtl","document","documentElement","classList","toggle","renderArea","index","items","react_default","a","createElement","className","ClassNames","map","item","getComponent","Link","to","onClick","SplitPage","props","_props$pageContext$fi","pageContext","fields","PageRoot","meta","cms_SplitContainer_SplitContainer","__webpack_require__","d","__webpack_exports__","AppConfigProvider","useAppConfig","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Context","createContext","undefined","useContext","_useState","useState","something","setSomething","context","useMemo","locales","currentLocaleCode","slug","Provider","value","children","AUTHOR","process","SEO","_ref$description","description","_ref$lang","lang","_ref$meta","_ref$keywords","keywords","title","completeMeta","name","content","property","concat","length","join","_useAppConfig","textDirection","find","locale","code","direction","Helmet_default","htmlAttributes","dir","titleTemplate","Navigation","objectDestructuringEmpty_default","expanded","classNames","metaKeywords","metaDescription","metaTitle","_ref$withNavigation","withNavigation","AppConfig","Page","noNav","seo","components_Navigation_Navigation","_RichText_module_scss__WEBPACK_IMPORTED_MODULE_1__","_RichText_module_scss__WEBPACK_IMPORTED_MODULE_1___default","classnames__WEBPACK_IMPORTED_MODULE_2__","classnames__WEBPACK_IMPORTED_MODULE_2___default","RichText","m","module","exports","require","default","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","InternalPageRenderer","Object","assign","json","propTypes","PropTypes","shape","string","isRequired","ContentTypes","Image","data","img","src","image","file","url","Component","orgTypeId","sys","contentType","id","typeId","charAt","toUpperCase","substring","key","object","func","AppLink","objectWithoutPropertiesLoose_default","gatsby_link_default"],"mappings":"2KA8CeA,EAnCkC,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,MAAOC,EAAYF,EAAZE,MACvD,SAASC,IACLC,SAASC,iBAAmBD,SAASC,gBAAgBC,UAAUC,OAAO,OAG1E,SAASC,EAAWC,EAAeC,GAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,OAASN,IAChCE,EAAAC,EAAAC,cAAA,iBAASJ,EAAT,4BACAE,EAAAC,EAAAC,cAAA,WAAMH,EAAMM,IAAI,SAAAC,GAAI,OAAIC,YAAaD,MAC1B,IAAVR,GACGE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,GAAG,eAAZ,gCAEJT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAASC,GAAG,WAAZ,2BAEJT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQQ,QAASlB,GAAjB,iBAQxB,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWhB,gBACtBS,EAAW,EAAGP,GACdO,EAAW,EAAGN,cCfZoB,UAX8C,SAAAC,GAAS,IAAAC,EACzCD,EAAME,YAAYC,OAAnCzB,EAD0DuB,EAC1DvB,MAAOC,EADmDsB,EACnDtB,MACf,OACIS,EAAAC,EAAAC,cAACc,EAAA,EAAaJ,EAAME,YAAYG,KAC5BjB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWO,WACvBX,EAAAC,EAAAC,cAACgB,EAAD,CAAgB5B,MAAOA,EAAOC,MAAOA,yCCpBrD4B,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAiBMG,EAAUC,6BAAiCC,GAEjD,SAASN,IACL,OAAOO,qBAAWH,GAGtB,IAAML,EAA8C,SAACV,GAAU,IAAAmB,EAOzBC,mBAAS,GAApCC,EAPoDF,EAAA,GAOzCG,EAPyCH,EAAA,GAUrDI,EAAUC,kBAA2B,WACvC,MAAO,CACHC,QAASzB,EAAMyB,QACfC,kBAAmB1B,EAAM0B,kBACzBC,KAAM3B,EAAM2B,KACZN,YACAC,iBAEL,CAACtB,EAAOqB,IAEX,OACIR,EAAAxB,EAAAC,cAACyB,EAAQa,SAAT,CAAkBC,MAAON,GACpBvB,EAAM8B,wIClCbC,EAASC,MA0EAC,EA/DuB,SAAAxD,GAAwE,IAAAyD,EAAAzD,EAArE0D,mBAAqE,IAAAD,EAAvD,GAAuDA,EAAAE,EAAA3D,EAAnD4D,YAAmD,IAAAD,EAA5C,KAA4CA,EAAAE,EAAA7D,EAAtC4B,YAAsC,IAAAiC,EAA/B,GAA+BA,EAAAC,EAAA9D,EAA3B+D,gBAA2B,IAAAD,EAAhB,GAAgBA,EAAZE,EAAYhE,EAAZgE,MACxFC,EAAe,CACjB,CACIC,KAAI,cACJC,QAAST,GAEb,CACIU,SAAQ,WACRD,QAASH,GAEb,CACII,SAAQ,iBACRD,QAAST,GAEb,CACIU,SAAQ,UACRD,QAAO,WAEX,CACID,KAAI,eACJC,QAAO,WAEX,CACID,KAAI,kBACJC,QAASb,GAEb,CACIY,KAAI,gBACJC,QAASH,GAEb,CACIE,KAAI,sBACJC,QAAST,IAGZW,OACGN,EAASO,OAAS,EACZ,CACIJ,KAAI,WACJC,QAASJ,EAASQ,KAAT,OAEb,IAETF,OAAOzC,GA3C8F4C,EA6CrEtC,cAA9Bc,EA7CmGwB,EA6CnGxB,QAASC,EA7C0FuB,EA6C1FvB,kBACVwB,EAAgBzB,GAAWC,EAC7BD,EAAQ0B,KAAK,SAAAC,GAAM,OAAIA,EAAOC,OAAS3B,IAAoB4B,UACzD,MAEN,OACIlE,EAAAC,EAAAC,cAACiE,EAAAlE,EAAD,CACImE,eAAgB,CACZnB,OACAoB,IAAKP,GAETT,MAAOA,EACPiB,cAAa,UACbrD,KAAMqC,yCCrEHiB,EAL8B,SAAAlF,GAAQmF,IAAAnF,GAAA,IAAA0C,EACjBC,oBAAS,GAAlCyC,EAD0C1C,EAAA,GAAAA,EAAA,GAEjD,OAAO/B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuE,IAAWtE,IAAWmE,WAAYE,GAAY,aAA9D,SC0BIzD,IAtBiD,SAAA3B,GAUtD,IARFqD,EAQErD,EARFqD,SACAiC,EAOEtF,EAPFsF,aACAC,EAMEvF,EANFuF,gBACAC,EAKExF,EALFwF,UACAxC,EAIEhD,EAJFgD,QACAC,EAGEjD,EAHFiD,kBACAC,EAEElD,EAFFkD,KAEEuC,EAAAzF,EADF0F,sBACE,IAAAD,KACN,OACI9E,EAAAC,EAAAC,cAAC8E,EAAA,EAAD,CAAmB3C,QAASA,EAASC,kBAAmBA,EAAmBC,KAAMA,GAC7EvC,EAAAC,EAAAC,cAAA,OAAKC,UAAWuE,IAAWtE,IAAW6E,MAAOF,GAAkB3E,IAAW8E,QACtElF,EAAAC,EAAAC,cAACiF,EAAD,CAAK9B,MAAOwB,EAAW9B,YAAa6B,EAAiBxB,SAAUuB,IAC9DI,GAAkB/E,EAAAC,EAAAC,cAACkF,EAAD,MAClB1C,uCC5BjB,IAAAlB,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAA6D,EAAAlE,EAAA,KAAAmE,EAAAnE,EAAAO,EAAA2D,GAAAE,EAAApE,EAAA,KAAAqE,EAAArE,EAAAO,EAAA6D,GAgBeE,IAJ4B,SAAApG,GAAmB,IAAhBc,EAAgBd,EAAhBc,UAC1C,OAAOsB,EAAAxB,EAAAC,cAAA,OAAKC,UAAWuE,IAAWtE,IAAWqF,SAAUtF,IAAhD,yDCbX,IAAsBuF,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oGCMzCK,EAAmB,SAAA1G,GAAkB,IAAf2G,EAAe3G,EAAf2G,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOC,IAAMnG,cAAcoG,IAApBC,OAAAC,OAAA,CACLR,WACAC,iBACGA,EAAcQ,QAIrBV,EAAiBW,UAAY,CAC3BV,SAAUW,IAAUC,MAAM,CACxBR,SAAUO,IAAUE,OAAOC,aAC1BA,YAGUf,sEChBVgB,+CCYUC,EARyB,SAAA3H,GAAyB,IAAtBc,EAAsBd,EAAtBc,UAAW8G,EAAW5H,EAAX4H,KAClD,OACIjH,EAAAC,EAAAC,cAAA,OAAKC,UAAWuE,IAAWtE,IAAW4G,MAAO7G,IACzCH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW8G,IAAKC,IAAKF,EAAKlG,OAAOqG,MAAMrG,OAAOsG,KAAKC,kBDP1EP,+DA2CUxG,IA3Bf,SAAsBD,GAClB,IAMIiH,EANEC,EAAYlH,EAAKmH,IAAIC,YAAYD,IAAIE,GACrCC,EAASJ,EAAUK,OAAO,GAAGC,cAAgBN,EAAUO,UAAU,GAEjEJ,EAAKrH,EAAKmH,IAAIE,GAIpB,OAHaZ,EAAaa,IAItB,KAAKb,EAAaC,MACdO,EAAYP,EACZ,MACJ,KAAKD,EAAatB,SACd8B,EAAY9B,IACZ,MACJ,QACI8B,EAAY,WACR,OAAOvH,EAAAC,EAAAC,cAAA,sDAOnB,OAAOF,EAAAC,EAAAC,cAACqH,EAAD,CAAWS,IAAKL,EAAIV,KAAM3G,oHEjCV+F,IAAMzE,cAAc,IA0CvC+E,IAAUsB,OACTtB,IAAUE,OAAOC,WAChBH,IAAUuB,KACRvB,IAAUuB,KCzCPC,IAJkC,SAAA9I,GAA4B,IAAzBqD,EAAyBrD,EAAzBqD,SAAa9B,EAAYwH,IAAA/I,EAAA,cACzE,OAAOW,EAAAC,EAAAC,cAACmI,EAAApI,EAAeW,EAAQ8B","file":"component---src-components-cms-pages-split-page-split-page-tsx-144893098c66cbc03345.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport getComponent from '../../../utils/cms/component-resolver';\n\nimport ClassNames from './SplitContainer.module.scss';\nimport AppLink from '../../../util-components/Link/Link';\n\ninterface Props {\n    area1: any[];\n    area2: any[];\n}\n\nconst SplitContainer: FunctionComponent<Props> = ({ area1, area2 }) => {\n    function toggleRtl(): void {\n        document.documentElement && document.documentElement.classList.toggle('rtl');\n    }\n\n    function renderArea(index: number, items: any[]): React.ReactNode {\n        return (\n            <div className={ClassNames['area' + index]}>\n                <h3>Area{index} from CMS SplitContainer</h3>\n                <div>{items.map(item => getComponent(item))}</div>\n                {index === 2 && (\n                    <div>\n                        <div>\n                            <AppLink to=\"/blank-page\">Second page (hard link now)</AppLink>\n                        </div>\n                        <div>\n                            <AppLink to=\"/splash\">Splash (hard link now)</AppLink>\n                        </div>\n                        <div>\n                            <button onClick={toggleRtl}>Toggle RTL</button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    return (\n        <div className={ClassNames.SplitContainer}>\n            {renderArea(1, area1)}\n            {renderArea(2, area2)}\n        </div>\n    );\n};\n\nexport default SplitContainer;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './SplitPage.module.scss';\nimport SplitContainer from '../../SplitContainer/SplitContainer';\nimport PageRoot from '../PageRoot/PageRoot';\nimport { CmsPageContext } from '../../../../types/CmsPageContext';\n\ninterface Props {\n    pageContext: {\n        fields: {\n            area1: any[];\n            area2: any[];\n        };\n    };\n}\n\nconst SplitPage: FunctionComponent<Props & CmsPageContext> = props => {\n    const { area1, area2 } = props.pageContext.fields;\n    return (\n        <PageRoot {...props.pageContext.meta}>\n            <div className={ClassNames.SplitPage}>\n                <SplitContainer area1={area1} area2={area2} />\n            </div>\n        </PageRoot>\n    );\n};\n\nexport default SplitPage;\n","import React, {createContext, FunctionComponent, useContext, useMemo, useState} from \"react\";\nimport {ILocale} from \"../../types/ILocale\";\n\ninterface IAppConfigContext {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n    something: any;\n    setSomething(hello: number): void;\n}\n\ninterface Props {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n}\n\nconst Context = createContext<IAppConfigContext>(undefined!);\n\nfunction useAppConfig() {\n    return useContext(Context);\n}\n\nconst AppConfigProvider: FunctionComponent<Props> = (props) => {\n    /* 'something' is an example here to make the context changeable AND have memorized context, this way:\n     * - no unnecessary rerender\n     * - having props for context AND settable properties\n     * - no class with getDerivedStateFromProps, although I don't think it's that bad\n     *   (in contrast with the internet :), this prevents it and is shorter.\n     **/\n    const [something, setSomething] = useState(0);\n\n    // memorized variable. if props and something don't change, same value is returned so no rerender trigger.\n    const context = useMemo<IAppConfigContext>(() => {\n        return {\n            locales: props.locales,\n            currentLocaleCode: props.currentLocaleCode,\n            slug: props.slug,\n            something,\n            setSomething,\n        }\n    }, [props, something]);\n\n    return (\n        <Context.Provider value={context}>\n            {props.children}\n        </Context.Provider>\n    );\n};\n\nexport {\n    AppConfigProvider,\n    useAppConfig,\n}","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { FunctionComponent } from 'react';\nimport Helmet from 'react-helmet';\nimport {useAppConfig} from \"../contexts/AppConfig/AppConfig\";\n\nconst AUTHOR = process.env.TWITTER_AUTHOR || '';\nconst TAB_TITLE_SUFFIX = process.env.TAB_TITLE_SUFFIX || '';\n\ninterface Props {\n    description?: string;\n    lang?: string;\n    meta?: JSX.IntrinsicElements['meta'][];\n    keywords?: string[];\n    title: string;\n}\n\nconst SEO: FunctionComponent<Props> = ({ description = '', lang = 'en', meta = [], keywords = [], title }) => {\n    const completeMeta = [\n        {\n            name: `description`,\n            content: description,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: description,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: AUTHOR,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: description,\n        },\n    ]\n        .concat(\n            keywords.length > 0\n                ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                  }\n                : []\n        )\n        .concat(meta as any);\n\n    const {locales, currentLocaleCode} = useAppConfig();\n    const textDirection = locales && currentLocaleCode ?\n        locales.find(locale => locale.code === currentLocaleCode)!.direction\n        : 'ltr';\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n                dir: textDirection,\n            }}\n            title={title}\n            titleTemplate={`%s${TAB_TITLE_SUFFIX}`}\n            meta={completeMeta}\n        />\n    );\n};\n\nexport default SEO;\n","import React, { FunctionComponent, useState } from 'react';\nimport ClassNames from './Navigation.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {}\n\nconst Navigation: FunctionComponent<Props> = ({}) => {\n    const [expanded, setExpanded] = useState(false);\n    return <div className={classNames(ClassNames.Navigation, expanded && 'expanded')}>MENU</div>;\n};\n\nexport default Navigation;\n","import React, {FunctionComponent} from 'react';\nimport ClassNames from './PageRoot.module.scss';\nimport classNames from 'classnames';\nimport {CmsPageMetaContext} from '../../../../types/CmsPageMetaContext';\nimport SEO from '../../../seo';\nimport Navigation from '../../../Navigation/Navigation';\nimport {AppConfigProvider} from \"../../../../contexts/AppConfig/AppConfig\";\n\ninterface Props {\n    withNavigation?: boolean;\n}\n\nconst PageRoot: FunctionComponent<Props & CmsPageMetaContext> = (\n    {\n        children,\n        metaKeywords,\n        metaDescription,\n        metaTitle,\n        locales,\n        currentLocaleCode,\n        slug,\n        withNavigation = true,\n    }) => {\n    return (\n        <AppConfigProvider locales={locales} currentLocaleCode={currentLocaleCode} slug={slug}>\n            <div className={classNames(ClassNames.Page, !withNavigation && ClassNames.noNav)}>\n                <SEO title={metaTitle} description={metaDescription} keywords={metaKeywords}/>\n                {withNavigation && <Navigation/>}\n                {children}\n            </div>\n        </AppConfigProvider>\n    );\n};\n\nexport default PageRoot;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './RichText.module.scss';\nimport classNames from 'classnames';\n// import { BLOCKS } from '@contentful/rich-text-types';\n// import { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n// import { documentToReactComponents } from 'contentful';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst RichText: FunctionComponent<Props> = ({ className }) => {\n    return <div className={classNames(ClassNames.RichText, className)}>RICH TEXT ... from CMS RichText</div>;\n};\n\nexport default RichText;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react';\nimport { isDev } from '../environment/environment';\nimport RichText from '../../components/cms/content-types/RichText/RichText';\nimport Image from '../../components/cms/content-types/Image/Image';\n\nenum ContentTypes {\n    Image,\n    RichText,\n}\n\ninterface IContentFulItem {\n    sys: {\n        id: string;\n        contentType: {\n            sys: {\n                id: string;\n            };\n        };\n    };\n}\n\nfunction getComponent(item: IContentFulItem): React.ReactNode {\n    const orgTypeId = item.sys.contentType.sys.id;\n    const typeId = orgTypeId.charAt(0).toUpperCase() + orgTypeId.substring(1);\n\n    const id = item.sys.id;\n    const type = ContentTypes[typeId];\n\n    let Component;\n    switch (type) {\n        case ContentTypes.Image:\n            Component = Image;\n            break;\n        case ContentTypes.RichText:\n            Component = RichText;\n            break;\n        default:\n            Component = function TBIComp(): React.ReactNode {\n                return <div>TO BE IMPLEMENTED ... unknown from CMS</div>;\n            };\n            if (isDev()) {\n                console.error(`Missing implementation for CMS content type [${orgTypeId}]`);\n            }\n            break;\n    }\n    return <Component key={id} data={item} />;\n}\n\nexport default getComponent;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './Image.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Image: FunctionComponent<Props> = ({ className, data }) => {\n    return (\n        <div className={classNames(ClassNames.Image, className)}>\n            <img className={ClassNames.img} src={data.fields.image.fields.file.url} />\n        </div>\n    );\n};\n\nexport default Image;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React, { FunctionComponent } from 'react';\nimport { Link as GatsbyLink } from 'gatsby';\n\n// Abstraction for links, so we don't have dependency on Gatsby in our components.\n// If more props needed, add them here\nexport interface AppLinkProps {\n    activeClassName?: string;\n    replace?: boolean;\n    to: string;\n    className?: string;\n}\n\nconst AppLink: FunctionComponent<AppLinkProps> = ({ children, ...props }) => {\n    return <GatsbyLink {...props}>{children}</GatsbyLink>;\n};\n\nexport default AppLink;\n"],"sourceRoot":""}