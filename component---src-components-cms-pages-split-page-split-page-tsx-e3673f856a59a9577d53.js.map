{"version":3,"sources":["webpack:///./src/components/cms/content-types/RichText/RichText.tsx","webpack:///./src/utils/cms/component-resolver.tsx","webpack:///./src/utils/environment/environment.ts","webpack:///./src/components/cms/content-types/Image/Image.tsx","webpack:///./src/components/cms/SplitContainer/SplitContainer.tsx","webpack:///./src/components/cms/pages/SplitPage/SplitPage.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_RichTextModule","_richTextTypes","_richTextReactRenderer","_AppLink","_link","_PageConfig","Text","children","default","createElement","className","Paragraph","node","data","ClassNames","RichText","doc","options","renderNode","[object Object]","BLOCKS","EMBEDDED_ENTRY","JSON","stringify","PARAGRAPH","INLINES","HYPERLINK","to","uri","content","value","ENTRY_HYPERLINK","pageLinkMap","locales","currentLocaleCode","usePageConfig","slug","target","sys","id","locale","find","code","link","getLinkPath","documentToReactComponents","constructRichText","ContentTypes","_environment","_RichText","_Image","item","orgTypeId","contentType","typeId","charAt","toUpperCase","substring","Component","Image","fields","image","text","isDev","console","error","key","process","_ImageModule","_classnames","img","src","file","url","_componentResolver","_SplitContainerModule","area1","area2","renderArea","index","items","map","SplitContainer","_SplitPageModule","_SplitContainer","props","pageContext","SplitPage"],"mappings":"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","file":"component---src-components-cms-pages-split-page-split-page-tsx-e3673f856a59a9577d53.js","sourcesContent":["/*\n * https://www.contentful.com/developers/docs/javascript/tutorials/rendering-contentful-rich-text-with-javascript/\n * https://github.com/contentful/rich-text/tree/master/packages/rich-text-react-renderer\n * */\nimport React, { FunctionComponent } from 'react';\nimport ClassNames from './RichText.module.scss';\nimport { BLOCKS, INLINES } from '@contentful/rich-text-types';\nimport { documentToReactComponents, Options } from '@contentful/rich-text-react-renderer';\nimport AppLink from '../../../../util-components/AppLink/AppLink';\nimport { getLinkPath } from '../../../../utils/link/link';\nimport { Locale } from 'Types/Locale';\nimport { usePageConfig } from '../../../../contexts/PageConfig/PageConfig';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Text: FunctionComponent = ({ children }) => <p className=\"align-center\">{children}</p>;\n\nconst Paragraph = (node, children) => {\n    return <Text>{children}</Text>;\n};\n\nfunction constructRichText(doc) {\n    const options: Options = {\n        renderNode: {\n            [BLOCKS.EMBEDDED_ENTRY]: function EmbeddedEntry(node) {\n                return <div>{JSON.stringify(node)}</div>;\n            },\n            [BLOCKS.PARAGRAPH]: Paragraph,\n            [INLINES.HYPERLINK]: function HyperLink(node) {\n                return <AppLink to={node.data.uri}>{(node.content[0] as any).value}</AppLink>;\n            },\n            [INLINES.ENTRY_HYPERLINK]: function EntryHyperLink(node) {\n                const { pageLinkMap, locales, currentLocaleCode } = usePageConfig();\n                const slug = pageLinkMap[node.data.target.sys.id];\n\n                const locale: Locale = locales.find(locale => locale.code === currentLocaleCode)!;\n                const link = getLinkPath(locale, slug);\n\n                return <AppLink to={link}>{(node.content[0] as any).value}</AppLink>;\n            },\n        },\n    };\n\n    return documentToReactComponents(doc, options);\n}\nconst RichText: FunctionComponent<Props> = ({ className, data }) => {\n    return <div className={ClassNames.RichText}>{constructRichText(data)}</div>;\n};\n\nexport default RichText;\n","import { isDev } from '../environment/environment';\nimport RichText from '../../components/cms/content-types/RichText/RichText';\nimport Image from '../../components/cms/content-types/Image/Image';\nimport React, { ReactNode } from 'react';\n\nenum ContentTypes {\n    Image,\n    RichText,\n}\n\ninterface IContentFulItem {\n    sys: {\n        id: string;\n        contentType: {\n            sys: {\n                id: string;\n            };\n        };\n    };\n    [key: string]: any;\n}\n\nfunction getComponent(item: IContentFulItem): ReactNode {\n    const orgTypeId = item.sys.contentType.sys.id;\n    const typeId = orgTypeId.charAt(0).toUpperCase() + orgTypeId.substring(1);\n\n    const id = item.sys.id;\n    const type = ContentTypes[typeId];\n\n    let data;\n    let Component;\n    switch (type) {\n        case ContentTypes.Image:\n            Component = Image;\n            data = item.fields.image;\n            break;\n        case ContentTypes.RichText:\n            Component = RichText;\n            data = item.fields.text;\n            break;\n        default:\n            Component = function TBIComp(): ReactNode {\n                return <div>TO BE IMPLEMENTED ... unknown from CMS</div>;\n            };\n            data = item;\n            if (isDev()) {\n                console.error(`Missing implementation for CMS content type [${orgTypeId}]`);\n            }\n            break;\n    }\n    return <Component key={id} data={data} />;\n}\n\nexport default getComponent;\n","export function isDev(): boolean {\n    return process.env.NODE_ENV === 'development';\n}\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './Image.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Image: FunctionComponent<Props> = ({ className, data }) => {\n    return (\n        <div className={classNames(ClassNames.Image, className)}>\n            <img className={ClassNames.img} src={data.fields.file.url} />\n        </div>\n    );\n};\n\nexport default Image;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport getComponent from '../../../utils/cms/component-resolver';\n\nimport ClassNames from './SplitContainer.module.scss';\n\ninterface Props {\n    area1: any[];\n    area2: any[];\n}\n\nconst SplitContainer: FunctionComponent<Props> = ({ area1, area2 }) => {\n    function renderArea(index: number, items: any[]): ReactNode {\n        return (\n            <div className={ClassNames['area' + index]}>\n                <h3>Area{index} from CMS SplitContainer</h3>\n                <div>{items.map(item => getComponent(item))}</div>\n            </div>\n        );\n    }\n\n    return (\n        <div className={ClassNames.SplitContainer}>\n            {renderArea(1, area1)}\n            {renderArea(2, area2)}\n        </div>\n    );\n};\n\nexport default SplitContainer;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './SplitPage.module.scss';\nimport SplitContainer from '../../SplitContainer/SplitContainer';\n\ninterface Props {\n    pageContext: {\n        fields: {\n            area1: any[];\n            area2: any[];\n        };\n    };\n}\n\nconst SplitPage: FunctionComponent<Props> = props => {\n    const { area1, area2 } = props.pageContext.fields;\n    return (\n        <div className={ClassNames.SplitPage}>\n            <SplitContainer area1={area1} area2={area2} />\n        </div>\n    );\n};\n\nexport default SplitPage;\n"],"sourceRoot":""}