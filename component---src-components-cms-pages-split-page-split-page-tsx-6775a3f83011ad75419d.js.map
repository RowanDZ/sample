{"version":3,"sources":["webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/utils/cms/component-resolver.tsx","webpack:///./src/utils/environment/environment.ts","webpack:///./src/components/cms/content-types/Image/Image.tsx","webpack:///./src/components/cms/SplitContainer/SplitContainer.tsx","webpack:///./src/components/cms/pages/SplitPage/SplitPage.tsx","webpack:///./src/util-components/Link/Link.tsx","webpack:///./src/components/cms/content-types/RichText/RichText.tsx","webpack:///./.cache/gatsby-browser-entry.js"],"names":["module","exports","m","default","preferDefault","require","_react","_interopRequireDefault","__webpack_require__","_propTypes","_pageRenderer","_loader","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","React","createElement","InternalPageRenderer","json","propTypes","PropTypes","shape","string","isRequired","ContentTypes","_environment","_RichText","_Image","item","orgTypeId","sys","contentType","id","typeId","charAt","toUpperCase","substring","data","Component","Image","fields","image","RichText","text","isDev","console","error","key","process","_ImageModule","_classnames","className","ClassNames","img","src","file","url","_componentResolver","_SplitContainerModule","area1","area2","renderArea","index","items","map","SplitContainer","_SplitPageModule","_SplitContainer","props","pageContext","SplitPage","_gatsby","children","to","test","Link","Object","assign","href","_RichTextModule","_richTextTypes","_richTextReactRenderer","_Link","_link","_PageConfig","Text","Paragraph","node","doc","options","renderNode","[object Object]","BLOCKS","EMBEDDED_ENTRY","JSON","stringify","PARAGRAPH","INLINES","HYPERLINK","uri","content","value","ENTRY_HYPERLINK","pageLinkMap","locales","currentLocaleCode","usePageConfig","slug","target","locale","find","code","link","getLinkPath","documentToReactComponents","constructRichText","Error","_gatsbyLink","_interopRequireWildcard","_publicPageRenderer","StaticQueryContext","createContext","StaticQuery","Consumer","staticQueryData","query","render","useContext","context","object","func"],"mappings":"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","file":"component---src-components-cms-pages-split-page-split-page-tsx-6775a3f83011ad75419d.js","sourcesContent":["const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { isDev } from '../environment/environment';\nimport RichText from '../../components/cms/content-types/RichText/RichText';\nimport Image from '../../components/cms/content-types/Image/Image';\nimport React, { ReactNode } from 'react';\n\nenum ContentTypes {\n    Image,\n    RichText,\n}\n\ninterface IContentFulItem {\n    sys: {\n        id: string;\n        contentType: {\n            sys: {\n                id: string;\n            };\n        };\n    };\n    [key: string]: any;\n}\n\nfunction getComponent(item: IContentFulItem): ReactNode {\n    const orgTypeId = item.sys.contentType.sys.id;\n    const typeId = orgTypeId.charAt(0).toUpperCase() + orgTypeId.substring(1);\n\n    const id = item.sys.id;\n    const type = ContentTypes[typeId];\n\n    let data;\n    let Component;\n    switch (type) {\n        case ContentTypes.Image:\n            Component = Image;\n            data = item.fields.image;\n            break;\n        case ContentTypes.RichText:\n            Component = RichText;\n            data = item.fields.text;\n            break;\n        default:\n            Component = function TBIComp(): ReactNode {\n                return <div>TO BE IMPLEMENTED ... unknown from CMS</div>;\n            };\n            data = item;\n            if (isDev()) {\n                console.error(`Missing implementation for CMS content type [${orgTypeId}]`);\n            }\n            break;\n    }\n    return <Component key={id} data={data} />;\n}\n\nexport default getComponent;\n","export function isDev(): boolean {\n    return process.env.NODE_ENV === 'development';\n}\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './Image.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Image: FunctionComponent<Props> = ({ className, data }) => {\n    return (\n        <div className={classNames(ClassNames.Image, className)}>\n            <img className={ClassNames.img} src={data.fields.file.url} />\n        </div>\n    );\n};\n\nexport default Image;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport getComponent from '../../../utils/cms/component-resolver';\n\nimport ClassNames from './SplitContainer.module.scss';\nimport AppLink from '../../../util-components/Link/Link';\n\ninterface Props {\n    area1: any[];\n    area2: any[];\n}\n\nconst SplitContainer: FunctionComponent<Props> = ({ area1, area2 }) => {\n    function renderArea(index: number, items: any[]): ReactNode {\n        return (\n            <div className={ClassNames['area' + index]}>\n                <h3>Area{index} from CMS SplitContainer</h3>\n                <div>{items.map(item => getComponent(item))}</div>\n            </div>\n        );\n    }\n\n    return (\n        <div className={ClassNames.SplitContainer}>\n            {renderArea(1, area1)}\n            {renderArea(2, area2)}\n        </div>\n    );\n};\n\nexport default SplitContainer;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './SplitPage.module.scss';\nimport SplitContainer from '../../SplitContainer/SplitContainer';\n\ninterface Props {\n    pageContext: {\n        fields: {\n            area1: any[];\n            area2: any[];\n        };\n    };\n}\n\nconst SplitPage: FunctionComponent<Props> = props => {\n    const { area1, area2 } = props.pageContext.fields;\n    return (\n        <div className={ClassNames.SplitPage}>\n            <SplitContainer area1={area1} area2={area2} />\n        </div>\n    );\n};\n\nexport default SplitPage;\n","import React, { FunctionComponent } from 'react';\nimport { Link as GatsbyLink } from 'gatsby';\n\n// Abstraction for links, so we don't have dependency on Gatsby in our components.\n// If more props needed, add them here\nexport interface AppLinkProps {\n    activeClassName?: string;\n    replace?: boolean;\n    to: string;\n    className?: string;\n}\n\nconst AppLink: FunctionComponent<AppLinkProps> = ({ children, to, ...props }) => {\n    // Tailor the following test to your environment.\n    // This example assumes that any internal link (intended for Gatsby)\n    // will start with exactly one slash, and that anything else is external.\n    const internal = /^\\/(?!\\/)/.test(to);\n\n    if (internal) {\n        return (\n            <GatsbyLink to={to} {...props}>\n                {children}\n            </GatsbyLink>\n        );\n    }\n    return (\n        <a href={to} {...props}>\n            {children}\n        </a>\n    );\n};\n\nexport default AppLink;\n","/*\n * https://www.contentful.com/developers/docs/javascript/tutorials/rendering-contentful-rich-text-with-javascript/\n * https://github.com/contentful/rich-text/tree/master/packages/rich-text-react-renderer\n * */\nimport React, { FunctionComponent } from 'react';\nimport ClassNames from './RichText.module.scss';\nimport { BLOCKS, INLINES } from '@contentful/rich-text-types';\nimport { documentToReactComponents, Options } from '@contentful/rich-text-react-renderer';\nimport AppLink from '../../../../util-components/Link/Link';\nimport { getLinkPath } from '../../../../utils/link/link';\nimport { Locale } from 'Types/Locale';\nimport { usePageConfig } from '../../../../contexts/PageConfig/PageConfig';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Text: FunctionComponent = ({ children }) => <p className=\"align-center\">{children}</p>;\n\nconst Paragraph = (node, children) => {\n    return <Text>{children}</Text>;\n};\n\nfunction constructRichText(doc) {\n    const options: Options = {\n        renderNode: {\n            [BLOCKS.EMBEDDED_ENTRY]: function EmbeddedEntry(node) {\n                return <div>{JSON.stringify(node)}</div>;\n            },\n            [BLOCKS.PARAGRAPH]: Paragraph,\n            [INLINES.HYPERLINK]: function HyperLink(node) {\n                return <AppLink to={node.data.uri}>{(node.content[0] as any).value}</AppLink>;\n            },\n            [INLINES.ENTRY_HYPERLINK]: function EntryHyperLink(node) {\n                const { pageLinkMap, locales, currentLocaleCode } = usePageConfig();\n                const slug = pageLinkMap[node.data.target.sys.id];\n\n                const locale: Locale = locales.find(locale => locale.code === currentLocaleCode)!;\n                const link = getLinkPath(locale, slug);\n\n                return <AppLink to={link}>{(node.content[0] as any).value}</AppLink>;\n            },\n        },\n    };\n\n    return documentToReactComponents(doc, options);\n}\nconst RichText: FunctionComponent<Props> = ({ className, data }) => {\n    return <div className={ClassNames.RichText}>{constructRichText(data)}</div>;\n};\n\nexport default RichText;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n"],"sourceRoot":""}