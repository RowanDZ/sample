{"version":3,"sources":["webpack:///./src/components/cms/content-types/RichText/RichText.tsx","webpack:///./src/utils/cms/component-resolver.tsx","webpack:///./src/components/cms/content-types/Image/Image.tsx","webpack:///./src/services/analytics/index.ts","webpack:///./src/components/cms/pages/BlankPage/BlankPage.tsx"],"names":["_react","_interopRequireDefault","__webpack_require__","_RichTextModule","_classnames","_richTextTypes","_richTextReactRenderer","_AppLink","Text","children","default","createElement","className","Paragraph","node","data","ClassNames","RichText","doc","options","renderNode","[object Object]","BLOCKS","EMBEDDED_ENTRY","JSON","stringify","PARAGRAPH","INLINES","HYPERLINK","to","uri","content","value","ENTRY_HYPERLINK","toId","target","sys","id","documentToReactComponents","constructRichText","ContentTypes","_environment","_RichText","_Image","item","orgTypeId","contentType","typeId","charAt","toUpperCase","substring","Component","Image","fields","image","text","isDev","console","error","key","_ImageModule","img","src","file","url","window","gtmDataLayer","push","_componentResolver","_BlankPageModule","_analytics","temp","analyticsTriggerEvent","event","cool","someData","props","components","pageContext","items","map","BlankPage","onClick"],"mappings":"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","file":"component---src-components-cms-pages-blank-page-blank-page-tsx-12236c4aab1bc1a0adf7.js","sourcesContent":["/*\n * https://www.contentful.com/developers/docs/javascript/tutorials/rendering-contentful-rich-text-with-javascript/\n * https://github.com/contentful/rich-text/tree/master/packages/rich-text-react-renderer\n * */\nimport React, { FunctionComponent } from 'react';\nimport ClassNames from './RichText.module.scss';\nimport classNames from 'classnames';\nimport { BLOCKS, INLINES } from '@contentful/rich-text-types';\nimport { documentToReactComponents, Options } from '@contentful/rich-text-react-renderer';\nimport AppLink from '../../../../util-components/AppLink/AppLink';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Text: FunctionComponent = ({ children }) => <p className=\"align-center\">{children}</p>;\n\nconst Paragraph = (node, children) => {\n    return <Text>{children}</Text>;\n};\n\nfunction constructRichText(doc) {\n    const options: Options = {\n        renderNode: {\n            [BLOCKS.EMBEDDED_ENTRY]: function EmbeddedEntry(node) {\n                return <div>{JSON.stringify(node)}</div>;\n            },\n            [BLOCKS.PARAGRAPH]: Paragraph,\n            [INLINES.HYPERLINK]: function HyperLink(node) {\n                return <AppLink to={node.data.uri}>{(node.content[0] as any).value}</AppLink>;\n            },\n            [INLINES.ENTRY_HYPERLINK]: function EntryHyperLink(node) {\n                return <AppLink toId={node.data.target.sys.id}>{(node.content[0] as any).value}</AppLink>;\n            },\n        },\n    };\n\n    return documentToReactComponents(doc, options);\n}\nconst RichText: FunctionComponent<Props> = ({ className, data }) => {\n    return <div className={classNames(ClassNames.RichText, className)}>{constructRichText(data)}</div>;\n};\n\nexport default RichText;\n","import { isDev } from '../environment/environment';\nimport RichText from '../../components/cms/content-types/RichText/RichText';\nimport Image from '../../components/cms/content-types/Image/Image';\nimport React, { ReactNode } from 'react';\n\nenum ContentTypes {\n    Image,\n    RichText,\n}\n\ninterface IContentFulItem {\n    sys: {\n        id: string;\n        contentType: {\n            sys: {\n                id: string;\n            };\n        };\n    };\n    [key: string]: any;\n}\n\nfunction getComponent(item: IContentFulItem): ReactNode {\n    const orgTypeId = item.sys.contentType.sys.id;\n    const typeId = orgTypeId.charAt(0).toUpperCase() + orgTypeId.substring(1);\n\n    const id = item.sys.id;\n    const type = ContentTypes[typeId];\n\n    let data;\n    let Component;\n    switch (type) {\n        case ContentTypes.Image:\n            Component = Image;\n            data = item.fields.image;\n            break;\n        case ContentTypes.RichText:\n            Component = RichText;\n            data = item.fields.text;\n            break;\n        default:\n            Component = function TBIComp(): ReactNode {\n                return <div>TO BE IMPLEMENTED ... unknown from CMS</div>;\n            };\n            data = item;\n            if (isDev()) {\n                console.error(`Missing implementation for CMS content type [${orgTypeId}]`);\n            }\n            break;\n    }\n    return <Component key={id} data={data} />;\n}\n\nexport default getComponent;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './Image.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst Image: FunctionComponent<Props> = ({ className, data }) => {\n    return (\n        <div className={classNames(ClassNames.Image, className)}>\n            <img className={ClassNames.img} src={data.fields.file.url} />\n        </div>\n    );\n};\n\nexport default Image;\n","declare global {\n    interface Window {\n        gtmDataLayer: { [key: string]: any }[];\n    }\n}\n\n// for external files needed the property name.\nconst dataLayerName = 'gtmDataLayer';\n\n// use for every function that can be called.\nfunction hasNoAnalytics() {\n    return !window.gtmDataLayer;\n}\n\nfunction analyticsTriggerEvent(data: { [key: string]: any }): void {\n    if (hasNoAnalytics()) {\n        return;\n    }\n    window.gtmDataLayer.push(data);\n}\n\nexport { dataLayerName, analyticsTriggerEvent };\n","import React, { FunctionComponent } from 'react';\nimport getComponent from '../../../../utils/cms/component-resolver';\nimport ClassNames from './BlankPage.module.scss';\nimport AppLink from '../../../../util-components/AppLink/AppLink';\nimport { analyticsTriggerEvent } from '../../../../services/analytics';\n\ninterface Props {\n    pageContext: {\n        fields: {\n            items: any[];\n        };\n    };\n}\n\nfunction temp() {\n    analyticsTriggerEvent({\n        event: 'specialTrigger',\n        cool: true,\n        someData: '1234567890',\n    });\n}\nconst BlankPage: FunctionComponent<Props> = props => {\n    const fields = props.pageContext.fields;\n    const components = fields.items.map(item => getComponent(item));\n\n    return (\n        <div className={ClassNames.BlankPage}>\n            <div>\n                <AppLink to=\"/\">Home (hard for now)</AppLink>\n            </div>\n            <button onClick={temp}>Trigger an event specialTrigger event</button>\n            {components}\n        </div>\n    );\n};\n\nexport default BlankPage;\n"],"sourceRoot":""}