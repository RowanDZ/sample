{"version":3,"sources":["webpack:///./src/components/cms/SplashSection/SplashSection.tsx","webpack:///./src/components/cms/pages/SplashPage/scrollHook.ts","webpack:///./src/components/cms/pages/SplashPage/SplashMagic.tsx","webpack:///./src/components/cms/pages/SplashPage/SplashPage.tsx","webpack:///./src/contexts/AppConfig/AppConfig.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/components/Navigation/Navigation.tsx","webpack:///./src/components/cms/pages/PageRoot/PageRoot.tsx","webpack:///./src/components/cms/content-types/RichText/RichText.tsx"],"names":["AppearType","SplashSection","props","fields","react_default","a","createElement","className","classNames","ClassNames","appearType","area1","style","background","background1","color","textColor1","img","src","image","file","url","area2","background2","textColor2","RichText","text","data","TIME_TO_WAIT_FOR_NEW_SCROLL_EVENT_IN_MILLIS","WHEEL_EVENT","TOUCH_START_EVENT","TOUCH_END_EVENT","wheeling","undefined","usePageItemsScroll","totalItemsToScrollThrough","initialItemIndex","_useState","useState","activeIndex","setActiveIndex","_useState2","previousIndex","setPreviousIndex","next","prev","touchStartEvent","e","preventDefault","yStart","changedTouches","pageY","window","addEventListener","touchEndEvent","removeEventListener","treshold","Math","abs","wheelEvent","deltaY","clearTimeout","setTimeout","useEffect","SplashMagic","_ref","sections","_usePageItemsScroll","length","components","map","item","idx","ACTIVE","ACTIVE_NEXT","ACTIVE_PREV","WAS_ACTIVE","NONE","cms_SplashSection_SplashSection","Object","assign","key","sys","id","SplashPage","pageContext","PageRoot","meta","withNavigation","SplashPage_SplashMagic","__webpack_require__","d","__webpack_exports__","AppConfigProvider","useAppConfig","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Context","createContext","useContext","something","setSomething","context","useMemo","locales","currentLocaleCode","slug","Provider","value","children","AUTHOR","process","SEO","_ref$description","description","_ref$lang","lang","_ref$meta","_ref$keywords","keywords","title","completeMeta","name","content","property","concat","join","_useAppConfig","textDirection","find","locale","code","direction","Helmet_default","htmlAttributes","dir","titleTemplate","Navigation","objectDestructuringEmpty_default","expanded","metaKeywords","metaDescription","metaTitle","_ref$withNavigation","AppConfig","Page","noNav","seo","components_Navigation_Navigation","options","renderNode","_renderNode","BLOCKS","EMBEDDED_ENTRY","node","JSON","stringify","documentToReactComponents"],"mappings":"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","file":"component---src-components-cms-pages-splash-page-splash-page-tsx-676c4db5c62c75468bb4.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport classNames from 'classnames';\nimport ClassNames from './SplashSection.module.scss';\nimport RichText from '../content-types/RichText/RichText';\n\nexport interface CmsProps {\n    sys: {\n        id: string;\n    };\n    fields: {\n        image: any;\n        text: any;\n        background1: string;\n        background2: string;\n        textColor1?: string;\n        textColor2?: string;\n    };\n}\n\nexport enum AppearType {\n    ACTIVE = 1,\n    ACTIVE_NEXT,\n    ACTIVE_PREV,\n    WAS_ACTIVE,\n    NONE,\n}\n\ninterface Props {\n    appearType: AppearType;\n}\n\nconst SplashSection: FunctionComponent<Props & CmsProps> = props => {\n    const fields = props.fields;\n    return (\n        <div className={classNames(ClassNames.SplashSection, ClassNames[AppearType[props.appearType]])}>\n            <div className={ClassNames.area1} style={{ background: fields.background1, color: fields.textColor1 }}>\n                <img className={ClassNames.img} src={fields.image.fields.file.url} />\n            </div>\n            <div className={ClassNames.area2} style={{ background: fields.background2, color: fields.textColor2 }}>\n                <RichText className={ClassNames.text} data={fields.text} />\n            </div>\n        </div>\n    );\n};\n\nexport default SplashSection;\n","/* THIS HOOK SHOULD BE USED ONLY ONCE ON A PAGE. WHEELING PROPERTY CANNOT BE IN STATE, BECAUSE THAT IS DELAYED IN REACT,\n *  HENCE MOUSE WILL TRIGGER A LOT MORE EVENTS. BUT BECAUSE WHEELING IS NOW A MODULE PROP, MULTIPLE useScroll WILL\n *  INFLUENCE THIS SAME PROPERTY. NO GO. RESOLVE & LEAVE IT, YOU DON'T WANT 2 SCROLLS IN 1 PAGE ANYWAY */\nimport { useEffect, useState } from 'react';\n\nconst TIME_TO_WAIT_FOR_NEW_SCROLL_EVENT_IN_MILLIS = 50;\n\nconst WHEEL_EVENT = 'wheel';\nconst TOUCH_START_EVENT = 'touchstart';\nconst TOUCH_END_EVENT = 'touchend';\nlet wheeling: number | undefined = undefined;\n\nfunction usePageItemsScroll(\n    totalItemsToScrollThrough: number,\n    initialItemIndex: number = 0\n): { activeIndex: number; previousIndex: number | undefined } {\n    const [activeIndex, setActiveIndex] = useState(initialItemIndex);\n    const [previousIndex, setPreviousIndex] = useState<number | undefined>(undefined);\n\n    function next(): void {\n        setPreviousIndex(activeIndex);\n        setActiveIndex(activeIndex + 1);\n    }\n    function prev(): void {\n        setPreviousIndex(activeIndex);\n        setActiveIndex(activeIndex - 1);\n    }\n\n    function touchStartEvent(e: TouchEvent): void {\n        e.preventDefault();\n        const yStart = e.changedTouches[0].pageY;\n\n        function touchEndEvent(e): void {\n            e.preventDefault();\n            window.removeEventListener(TOUCH_END_EVENT, touchEndEvent);\n            const treshold = e.changedTouches[0].pageY - yStart;\n            if (Math.abs(treshold) < 15) {\n                return;\n            }\n            if (treshold < 0) {\n                next();\n            } else {\n                prev();\n            }\n        }\n        window.addEventListener(TOUCH_END_EVENT, touchEndEvent);\n    }\n\n    function wheelEvent(e): void {\n        if (wheeling === undefined) {\n            if (e.deltaY > 0 && activeIndex < totalItemsToScrollThrough - 1) {\n                next();\n            } else if (e.deltaY < 0 && 0 < activeIndex) {\n                prev();\n            }\n        }\n        clearTimeout(wheeling);\n        wheeling = window.setTimeout(() => {\n            wheeling = undefined;\n        }, TIME_TO_WAIT_FOR_NEW_SCROLL_EVENT_IN_MILLIS);\n    }\n\n    // inefficient, needs a single time (so deps [], but had issue and code will not stay probably :) )\n    useEffect(() => {\n        if (totalItemsToScrollThrough <= 1) {\n            return;\n        }\n        window.addEventListener(WHEEL_EVENT, wheelEvent);\n        window.addEventListener(TOUCH_START_EVENT, touchStartEvent);\n        return () => {\n            window.removeEventListener(WHEEL_EVENT, wheelEvent);\n            window.removeEventListener(TOUCH_START_EVENT, touchStartEvent);\n        };\n    }, [activeIndex, totalItemsToScrollThrough]);\n\n    return {\n        activeIndex,\n        previousIndex,\n    };\n}\n\nexport default usePageItemsScroll;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport ClassNames from './SplashMagic.module.scss';\nimport SplashSection, { AppearType, CmsProps as SplashSectionCmsProps } from '../../SplashSection/SplashSection';\nimport usePageItemsScroll from './scrollHook';\n\ninterface Props {\n    sections: SplashSectionCmsProps[];\n}\n\nconst SplashMagic: FunctionComponent<Props> = ({ sections }) => {\n    const { activeIndex, previousIndex } = usePageItemsScroll(sections.length);\n\n    function renderComponents(): ReactNode {\n        return sections.map((item, idx) => {\n            const appearType =\n                idx === activeIndex\n                    ? previousIndex === undefined\n                        ? AppearType.ACTIVE\n                        : activeIndex > previousIndex\n                        ? AppearType.ACTIVE_NEXT\n                        : AppearType.ACTIVE_PREV\n                    : idx === previousIndex\n                    ? AppearType.WAS_ACTIVE\n                    : AppearType.NONE;\n\n            return <SplashSection key={item.sys.id} appearType={appearType} {...item} />;\n        });\n    }\n\n    return <div className={ClassNames.components}>{renderComponents()}</div>;\n};\n\nexport default SplashMagic;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './SplashPage.module.scss';\nimport { CmsPageContext } from '../../../../types/CmsPageContext';\nimport PageRoot from '../PageRoot/PageRoot';\nimport { CmsProps as SplashSectionCmsProps } from '../../SplashSection/SplashSection';\nimport SplashMagic from './SplashMagic';\n\ninterface Props {\n    pageContext: {\n        fields: {\n            sections: SplashSectionCmsProps[];\n        };\n    };\n}\n\nconst SplashPage: FunctionComponent<Props & CmsPageContext> = props => {\n    const sections = props.pageContext.fields.sections;\n    return (\n        <PageRoot {...props.pageContext.meta} withNavigation={false}>\n            <div className={ClassNames.SplashPage}>\n                <SplashMagic sections={sections} />\n            </div>\n        </PageRoot>\n    );\n};\n\nexport default SplashPage;\n","import React, { createContext, FunctionComponent, useContext, useMemo, useState } from 'react';\nimport { ILocale } from '../../types/ILocale';\n\ninterface IAppConfigContext {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n    something: any;\n    setSomething(hello: number): void;\n}\n\ninterface Props {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n}\n\nconst Context = createContext<IAppConfigContext>(undefined!);\n\nfunction useAppConfig() {\n    return useContext(Context);\n}\n\nconst AppConfigProvider: FunctionComponent<Props> = props => {\n    /* 'something' is an example here to make the context changeable AND have memorized context, this way:\n     * - no unnecessary rerender\n     * - having props for context AND settable properties\n     * - no class with getDerivedStateFromProps, although I don't think it's that bad\n     *   (in contrast with the internet :), this prevents it and is shorter.\n     **/\n    const [something, setSomething] = useState(0);\n\n    // memorized variable. if props and something don't change, same value is returned so no rerender trigger.\n    const context = useMemo<IAppConfigContext>(() => {\n        return {\n            locales: props.locales,\n            currentLocaleCode: props.currentLocaleCode,\n            slug: props.slug,\n            something,\n            setSomething,\n        };\n    }, [props, something]);\n\n    return <Context.Provider value={context}>{props.children}</Context.Provider>;\n};\n\nexport { AppConfigProvider, useAppConfig };\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { FunctionComponent } from 'react';\nimport Helmet from 'react-helmet';\nimport { useAppConfig } from '../contexts/AppConfig/AppConfig';\n\nconst AUTHOR = process.env.TWITTER_AUTHOR || '';\nconst TAB_TITLE_SUFFIX = process.env.TAB_TITLE_SUFFIX || '';\n\ninterface Props {\n    description?: string;\n    lang?: string;\n    meta?: JSX.IntrinsicElements['meta'][];\n    keywords?: string[];\n    title: string;\n}\n\nconst SEO: FunctionComponent<Props> = ({ description = '', lang = 'en', meta = [], keywords = [], title }) => {\n    const completeMeta = [\n        {\n            name: `description`,\n            content: description,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: description,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: AUTHOR,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: description,\n        },\n    ]\n        .concat(\n            keywords.length > 0\n                ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                  }\n                : []\n        )\n        .concat(meta as any);\n\n    const { locales, currentLocaleCode } = useAppConfig();\n    const textDirection =\n        locales && currentLocaleCode ? locales.find(locale => locale.code === currentLocaleCode)!.direction : 'ltr';\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n                dir: textDirection,\n            }}\n            title={title}\n            titleTemplate={`%s${TAB_TITLE_SUFFIX}`}\n            meta={completeMeta}\n        />\n    );\n};\n\nexport default SEO;\n","import React, { FunctionComponent, useState } from 'react';\nimport ClassNames from './Navigation.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {}\n\nconst Navigation: FunctionComponent<Props> = ({}) => {\n    const [expanded, setExpanded] = useState(false);\n    return <div className={classNames(ClassNames.Navigation, expanded && 'expanded')}>MENU</div>;\n};\n\nexport default Navigation;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './PageRoot.module.scss';\nimport classNames from 'classnames';\nimport { CmsPageMetaContext } from '../../../../types/CmsPageMetaContext';\nimport SEO from '../../../seo';\nimport Navigation from '../../../Navigation/Navigation';\nimport { AppConfigProvider } from '../../../../contexts/AppConfig/AppConfig';\n\ninterface Props {\n    withNavigation?: boolean;\n}\n\nconst PageRoot: FunctionComponent<Props & CmsPageMetaContext> = ({\n    children,\n    metaKeywords,\n    metaDescription,\n    metaTitle,\n    locales,\n    currentLocaleCode,\n    slug,\n    withNavigation = true,\n}) => {\n    return (\n        <AppConfigProvider locales={locales} currentLocaleCode={currentLocaleCode} slug={slug}>\n            <div className={classNames(ClassNames.Page, !withNavigation && ClassNames.noNav)}>\n                <SEO title={metaTitle} description={metaDescription} keywords={metaKeywords} />\n                {withNavigation && <Navigation />}\n                {children}\n            </div>\n        </AppConfigProvider>\n    );\n};\n\nexport default PageRoot;\n","/*\n * https://www.contentful.com/developers/docs/javascript/tutorials/rendering-contentful-rich-text-with-javascript/\n * https://github.com/contentful/rich-text/tree/master/packages/rich-text-react-renderer\n * */\nimport React, { FunctionComponent } from 'react';\nimport ClassNames from './RichText.module.scss';\nimport { BLOCKS } from '@contentful/rich-text-types';\nimport { documentToReactComponents, Options } from '@contentful/rich-text-react-renderer';\n\ninterface Props {\n    className?: string;\n    data: any;\n}\n\nconst options: Options = {\n    renderNode: {\n        // eslint-disable-next-line react/display-name\n        [BLOCKS.EMBEDDED_ENTRY]: node => {\n            return <div>{JSON.stringify(node)}</div>;\n        },\n    },\n};\n\nconst RichText: FunctionComponent<Props> = ({ className, data }) => {\n    return <div className={ClassNames.RichText}>{documentToReactComponents(data, options)}</div>;\n};\n\nexport default RichText;\n"],"sourceRoot":""}