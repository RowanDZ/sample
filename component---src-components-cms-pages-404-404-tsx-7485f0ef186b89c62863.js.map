{"version":3,"sources":["webpack:///./src/components/cms/pages/404/404.tsx","webpack:///./src/contexts/AppConfig/AppConfig.tsx","webpack:///./src/components/seo.tsx","webpack:///./src/components/Navigation/Navigation.tsx","webpack:///./src/components/cms/pages/PageRoot/PageRoot.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_PageRoot_PageRoot__WEBPACK_IMPORTED_MODULE_1__","NotFoundPage","props","a","createElement","pageContext","meta","d","AppConfigProvider","useAppConfig","Context","createContext","undefined","useContext","_useState","useState","something","setSomething","context","useMemo","locales","currentLocaleCode","slug","Provider","value","children","AUTHOR","process","SEO","_ref","_ref$description","description","_ref$lang","lang","_ref$meta","_ref$keywords","keywords","title","completeMeta","name","content","property","concat","length","join","_useAppConfig","textDirection","find","locale","code","direction","react_default","Helmet_default","htmlAttributes","dir","titleTemplate","Navigation","objectDestructuringEmpty_default","expanded","className","classNames","ClassNames","PageRoot","metaKeywords","metaDescription","metaTitle","_ref$withNavigation","withNavigation","AppConfig","Page","noNav","seo","components_Navigation_Navigation"],"mappings":"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","file":"component---src-components-cms-pages-404-404-tsx-7485f0ef186b89c62863.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport PageRoot from '../PageRoot/PageRoot';\nimport { CmsPageContext } from '../../../../types/CmsPageContext';\n\ninterface Props {}\n\nconst NotFoundPage: FunctionComponent<Props & CmsPageContext> = props => (\n    <PageRoot {...props.pageContext.meta}>\n        <h1>NOT FOUND</h1>\n        <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </PageRoot>\n);\n\nexport default NotFoundPage;\n","import React, { createContext, FunctionComponent, useContext, useMemo, useState } from 'react';\nimport { ILocale } from '../../types/ILocale';\n\ninterface IAppConfigContext {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n    something: any;\n    setSomething(hello: number): void;\n}\n\ninterface Props {\n    locales: ILocale[];\n    currentLocaleCode: string;\n    slug: string;\n}\n\nconst Context = createContext<IAppConfigContext>(undefined!);\n\nfunction useAppConfig() {\n    return useContext(Context);\n}\n\nconst AppConfigProvider: FunctionComponent<Props> = props => {\n    /* 'something' is an example here to make the context changeable AND have memorized context, this way:\n     * - no unnecessary rerender\n     * - having props for context AND settable properties\n     * - no class with getDerivedStateFromProps, although I don't think it's that bad\n     *   (in contrast with the internet :), this prevents it and is shorter.\n     **/\n    const [something, setSomething] = useState(0);\n\n    // memorized variable. if props and something don't change, same value is returned so no rerender trigger.\n    const context = useMemo<IAppConfigContext>(() => {\n        return {\n            locales: props.locales,\n            currentLocaleCode: props.currentLocaleCode,\n            slug: props.slug,\n            something,\n            setSomething,\n        };\n    }, [props, something]);\n\n    return <Context.Provider value={context}>{props.children}</Context.Provider>;\n};\n\nexport { AppConfigProvider, useAppConfig };\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React, { FunctionComponent } from 'react';\nimport Helmet from 'react-helmet';\nimport { useAppConfig } from '../contexts/AppConfig/AppConfig';\n\nconst AUTHOR = process.env.TWITTER_AUTHOR || '';\nconst TAB_TITLE_SUFFIX = process.env.TAB_TITLE_SUFFIX || '';\n\ninterface Props {\n    description?: string;\n    lang?: string;\n    meta?: JSX.IntrinsicElements['meta'][];\n    keywords?: string[];\n    title: string;\n}\n\nconst SEO: FunctionComponent<Props> = ({ description = '', lang = 'en', meta = [], keywords = [], title }) => {\n    const completeMeta = [\n        {\n            name: `description`,\n            content: description,\n        },\n        {\n            property: `og:title`,\n            content: title,\n        },\n        {\n            property: `og:description`,\n            content: description,\n        },\n        {\n            property: `og:type`,\n            content: `website`,\n        },\n        {\n            name: `twitter:card`,\n            content: `summary`,\n        },\n        {\n            name: `twitter:creator`,\n            content: AUTHOR,\n        },\n        {\n            name: `twitter:title`,\n            content: title,\n        },\n        {\n            name: `twitter:description`,\n            content: description,\n        },\n    ]\n        .concat(\n            keywords.length > 0\n                ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                  }\n                : []\n        )\n        .concat(meta as any);\n\n    const { locales, currentLocaleCode } = useAppConfig();\n    const textDirection =\n        locales && currentLocaleCode ? locales.find(locale => locale.code === currentLocaleCode)!.direction : 'ltr';\n\n    return (\n        <Helmet\n            htmlAttributes={{\n                lang,\n                dir: textDirection,\n            }}\n            title={title}\n            titleTemplate={`%s${TAB_TITLE_SUFFIX}`}\n            meta={completeMeta}\n        />\n    );\n};\n\nexport default SEO;\n","import React, { FunctionComponent, useState } from 'react';\nimport ClassNames from './Navigation.module.scss';\nimport classNames from 'classnames';\n\ninterface Props {}\n\nconst Navigation: FunctionComponent<Props> = ({}) => {\n    const [expanded, setExpanded] = useState(false);\n    return <div className={classNames(ClassNames.Navigation, expanded && 'expanded')}>MENU</div>;\n};\n\nexport default Navigation;\n","import React, { FunctionComponent } from 'react';\nimport ClassNames from './PageRoot.module.scss';\nimport classNames from 'classnames';\nimport { CmsPageMetaContext } from '../../../../types/CmsPageMetaContext';\nimport SEO from '../../../seo';\nimport Navigation from '../../../Navigation/Navigation';\nimport { AppConfigProvider } from '../../../../contexts/AppConfig/AppConfig';\n\ninterface Props {\n    withNavigation?: boolean;\n}\n\nconst PageRoot: FunctionComponent<Props & CmsPageMetaContext> = ({\n    children,\n    metaKeywords,\n    metaDescription,\n    metaTitle,\n    locales,\n    currentLocaleCode,\n    slug,\n    withNavigation = true,\n}) => {\n    return (\n        <AppConfigProvider locales={locales} currentLocaleCode={currentLocaleCode} slug={slug}>\n            <div className={classNames(ClassNames.Page, !withNavigation && ClassNames.noNav)}>\n                <SEO title={metaTitle} description={metaDescription} keywords={metaKeywords} />\n                {withNavigation && <Navigation />}\n                {children}\n            </div>\n        </AppConfigProvider>\n    );\n};\n\nexport default PageRoot;\n"],"sourceRoot":""}